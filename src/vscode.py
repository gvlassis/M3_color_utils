import kitty
import material_color_utilities_python as mcu
import color_defs
import json

def write(file, mode, scheme, scheme_8, scheme_wheel):
    # Based on: /Applications/Visual Studio Code.app/Contents/Resources/app/extensions/theme-tomorrow-night-blue/themes/tomorrow-night-blue-color-theme.json
    dictionary = {
        "type": mode,
        "colors": {
            "focusBorder": "#00000000",
            "foreground": mcu.hexFromArgb(scheme.get_onSurface()),
            "widget.border": "#00000000",
            "widget.shadow": "#00000000",
            "descriptionForeground": mcu.hexFromArgb(scheme.get_onSurface()),
            "icon.foreground": mcu.hexFromArgb(scheme.get_onSurface()),
            "selection.background": mcu.hexFromArgb(scheme.get_primary()) + "5f",
            "textLink.activeForeground": mcu.hexFromArgb(scheme.get_primary()),
            "textLink.foreground": mcu.hexFromArgb(scheme.get_primary()),
            "textPreformat.foreground": mcu.hexFromArgb(scheme.get_tertiary()),
            "textSeparator.foreground": mcu.hexFromArgb(scheme.get_tertiary()),
            "toolbar.hoverBackground": "#00000000",
            "button.background": mcu.hexFromArgb(scheme.get_primary()),
            "button.foreground": mcu.hexFromArgb(scheme.get_onPrimary()),
            "button.hoverBackground": mcu.hexFromArgb(scheme.get_primary()),
            "button.secondaryForeground": mcu.hexFromArgb(scheme.get_onSecondary()),
            "button.secondaryBackground": mcu.hexFromArgb(scheme.get_secondary()),
            "button.secondaryHoverBackground": mcu.hexFromArgb(scheme.get_secondary()),
            "dropdown.background": mcu.hexFromArgb(scheme.get_surface()),
            "dropdown.listBackground": mcu.hexFromArgb(scheme.get_surface()),
            "dropdown.border": "#00000000",
            "dropdown.foreground": mcu.hexFromArgb(scheme.get_onSurface()),
            "input.background": mcu.hexFromArgb(scheme.get_surface()),
            "input.foreground": mcu.hexFromArgb(scheme.get_onSurface()),
            "input.placeholderForeground": mcu.hexFromArgb(scheme.get_onSurface()),
            "inputOption.activeBackground": mcu.hexFromArgb(scheme.get_tertiary()),
            "inputOption.activeBorder": "#00000000",
            "inputOption.activeForeground": mcu.hexFromArgb(scheme.get_onTertiary()),
            "inputOption.hoverBackground": "#00000000",
            "inputValidation.errorBackground": mcu.hexFromArgb(scheme.get_error()),
            "inputValidation.errorForeground": mcu.hexFromArgb(scheme.get_onError()),
            "inputValidation.errorBorder": "#00000000",
            "inputValidation.infoBackground": mcu.hexFromArgb(scheme.get_tertiary()),
            "inputValidation.infoForeground": mcu.hexFromArgb(scheme.get_onTertiary()),
            "inputValidation.infoBorder": "#00000000",
            "inputValidation.warningBackground": mcu.hexFromArgb(scheme.get_primary()),
            "inputValidation.warningForeground": mcu.hexFromArgb(scheme.get_onPrimary()),
            "inputValidation.warningBorder": "#00000000",
            "scrollbarSlider.activeBackground": mcu.hexFromArgb(scheme.get_secondaryContainer()),
            "scrollbarSlider.background": mcu.hexFromArgb(scheme.get_secondaryContainer()),
            "scrollbarSlider.hoverBackground": mcu.hexFromArgb(scheme.get_secondaryContainer()),
            "badge.foreground": mcu.hexFromArgb(scheme.get_onPrimaryContainer()),
            "badge.background": mcu.hexFromArgb(scheme.get_primaryContainer()),
            "list.activeSelectionBackground": mcu.hexFromArgb(scheme.get_primaryContainer()),
            "list.activeSelectionForeground": mcu.hexFromArgb(scheme.get_onPrimaryContainer()),
            "list.highlightForeground": mcu.hexFromArgb(scheme.get_primary()),
            "list.hoverBackground": mcu.hexFromArgb(scheme.get_primary())+"3f",
            "list.invalidItemForeground": mcu.hexFromArgb(scheme.get_error()),
            "list.errorForeground": mcu.hexFromArgb(scheme.get_error()),
            "list.warningForeground": mcu.hexFromArgb(scheme.get_primary()),
            "activityBar.background": mcu.hexFromArgb(scheme.get_surfaceContainerHigh()),
            "activityBar.foreground": mcu.hexFromArgb(scheme.get_tertiary()),
            "activityBarBadge.background": mcu.hexFromArgb(scheme.get_primaryContainer()),
            "activityBarBadge.foreground": mcu.hexFromArgb(scheme.get_onPrimaryContainer()),
            "activityBar.inactiveForeground": mcu.hexFromArgb(scheme.get_onSurface()),
            "sideBar.background": mcu.hexFromArgb(scheme.get_surface()),
            "editorGroup.dropBackground": mcu.hexFromArgb(scheme.get_tertiary())+"5f",
            "editorGroupHeader.tabsBackground": mcu.hexFromArgb(scheme.get_surfaceContainerLow()),
            "editorGroup.dropIntoPromptForeground": mcu.hexFromArgb(scheme.get_onPrimaryContainer()),
            "editorGroup.dropIntoPromptBackground": mcu.hexFromArgb(scheme.get_primaryContainer()),
            "tab.activeBackground": mcu.hexFromArgb(scheme.get_primary()),
            "tab.unfocusedActiveBackground": mcu.hexFromArgb(scheme.get_primary()),
            "tab.activeForeground": mcu.hexFromArgb(scheme.get_onPrimary()),
            "tab.inactiveBackground": mcu.hexFromArgb(scheme.get_secondary()),
            "tab.unfocusedInactiveBackground": mcu.hexFromArgb(scheme.get_secondary()),
            "tab.inactiveForeground": mcu.hexFromArgb(scheme.get_onSecondary()),
            "tab.unfocusedActiveForeground": mcu.hexFromArgb(scheme.get_onPrimary()),
            "tab.unfocusedInactiveForeground": mcu.hexFromArgb(scheme.get_onSecondary()),
            "tab.hoverBackground": mcu.hexFromArgb(scheme.get_primary()),
            "tab.unfocusedHoverBackground": mcu.hexFromArgb(scheme.get_primary()),
            "editor.background": mcu.hexFromArgb(scheme.get_surfaceContainer()),
            "editor.foreground": mcu.hexFromArgb(scheme.get_onSurface()),
            "editorLineNumber.foreground": mcu.hexFromArgb(scheme.get_onSurface()),
            "editorLineNumber.activeForeground": mcu.hexFromArgb(scheme.get_primary()),
            "editorCursor.background": mcu.hexFromArgb(scheme.get_onPrimary()),
            "editorCursor.foreground": mcu.hexFromArgb(scheme.get_primary()),
            "editor.selectionBackground": mcu.hexFromArgb(scheme.get_primary()) + "5f",
            "editor.selectionHighlightBackground": mcu.hexFromArgb(scheme.get_primary()) + "3f",
            "editor.wordHighlightTextBackground": "#00000000",
            "editor.findMatchBackground": mcu.hexFromArgb(scheme.get_tertiary()) + "5f",
            "editor.findMatchHighlightBackground": mcu.hexFromArgb(scheme.get_tertiary()) + "3f",
            "editor.lineHighlightBackground": "#00000000",
            "editor.lineHighlightBorder": "#00000000",
            "editorWhitespace.foreground": mcu.hexFromArgb(scheme.get_tertiary()) + "5f",
            "editorBracketMatch.background": mcu.hexFromArgb(scheme.get_tertiary()) + "3f",
            "editorBracketMatch.border": "#00000000",
            "editorBracketHighlight.foreground1": mcu.hexFromArgb(scheme_wheel.get_violet()),
            "editorBracketHighlight.foreground2": mcu.hexFromArgb(scheme_wheel.get_blue_violet()),
            "editorBracketHighlight.foreground3": mcu.hexFromArgb(scheme_wheel.get_green_blue()),
            "editorBracketHighlight.foreground4": mcu.hexFromArgb(scheme_wheel.get_yellow_green()),
            "editorBracketHighlight.foreground5": mcu.hexFromArgb(scheme_wheel.get_orange_yellow()),
            "editorBracketHighlight.foreground6": mcu.hexFromArgb(scheme_wheel.get_red_orange()),
            "editorBracketHighlight.unexpectedBracket.foreground": mcu.hexFromArgb(scheme.get_error()),
            "editorOverviewRuler.border": "#00000000",
            "editorOverviewRuler.findMatchForeground": "#00000000",
            "editorOverviewRuler.rangeHighlightForeground": "#00000000",
            "editorOverviewRuler.selectionHighlightForeground": "#00000000",
            "editorOverviewRuler.wordHighlightForeground": "#00000000",
            "editorOverviewRuler.wordHighlightStrongForeground": "#00000000",
            "editorOverviewRuler.wordHighlightTextForeground": "#00000000",
            "editorOverviewRuler.errorForeground": "#00000000",
            "editorOverviewRuler.warningForeground": "#00000000",
            "editorOverviewRuler.errorForeground": "#00000000",
            "editorOverviewRuler.infoForeground": "#00000000",
            "editorOverviewRuler.bracketMatchForeground": "#00000000",
            "editorWidget.foreground": mcu.hexFromArgb(scheme.get_onSurface()),
            "editorWidget.background": mcu.hexFromArgb(scheme.get_surfaceContainerHigh()),
            "editorWidget.border": "#00000000",
            "statusBar.background": mcu.hexFromArgb(scheme.get_surfaceContainerHighest()),
            "statusBar.foreground": mcu.hexFromArgb(scheme.get_onSurface()),
            "statusBar.border": "#00000000",
            "statusBar.debuggingBackground": mcu.hexFromArgb(scheme.get_tertiary()),
            "statusBar.debuggingForeground": mcu.hexFromArgb(scheme.get_onTertiary()),
            "statusBar.debuggingBorder": "#00000000",
            "statusBar.noFolderBackground": mcu.hexFromArgb(scheme.get_surfaceContainerHighest()),
            "statusBar.noFolderForeground": mcu.hexFromArgb(scheme.get_onSurface()),
            "statusBar.noFolderBorder": "#00000000",
            "statusBarItem.errorBackground": mcu.hexFromArgb(scheme.get_error()),
            "statusBarItem.errorForeground": mcu.hexFromArgb(scheme.get_onError()),
            "titleBar.activeBackground": mcu.hexFromArgb(scheme.get_surfaceContainerHighest()),
            "titleBar.activeForeground": mcu.hexFromArgb(scheme.get_onSurface()),
            "titleBar.inactiveBackground": mcu.hexFromArgb(scheme.get_surfaceContainerHighest()),
            "titleBar.inactiveForeground": mcu.hexFromArgb(scheme.get_onSurface()),
            "notificationsErrorIcon.foreground": mcu.hexFromArgb(scheme.get_error()),
            "notificationsWarningIcon.foreground": mcu.hexFromArgb(scheme.get_primary()),
            "notificationsInfoIcon.foreground": mcu.hexFromArgb(scheme.get_tertiary()),
            "pickerGroup.border": mcu.hexFromArgb(scheme.get_tertiary()),
            "pickerGroup.foreground": mcu.hexFromArgb(scheme.get_tertiary()),
            "keybindingLabel.background": mcu.hexFromArgb(scheme.get_surfaceContainerHighest()),
            "keybindingLabel.foreground": mcu.hexFromArgb(scheme.get_onSurface()),
            "keybindingLabel.border": mcu.hexFromArgb(scheme.get_surfaceContainerHighest()),
            "keybindingLabel.bottomBorder": mcu.hexFromArgb(scheme.get_surfaceContainerHighest()),
            "keybindingTable.headerBackground": mcu.hexFromArgb(scheme.get_surface()),
            "keybindingTable.rowsBackground": mcu.hexFromArgb(scheme.get_surface()),
            "terminal.ansiBlack": mcu.hexFromArgb(scheme_8.get_black()),
            "terminal.ansiRed": mcu.hexFromArgb(scheme_8.get_red()),
            "terminal.ansiGreen": mcu.hexFromArgb(scheme_8.get_green()),
            "terminal.ansiYellow": mcu.hexFromArgb(scheme_8.get_yellow()),
            "terminal.ansiBlue": mcu.hexFromArgb(scheme_8.get_blue()),
            "terminal.ansiMagenta": mcu.hexFromArgb(scheme_8.get_magenta()),
            "terminal.ansiCyan": mcu.hexFromArgb(scheme_8.get_cyan()),
            "terminal.ansiWhite": mcu.hexFromArgb(scheme_8.get_white()),
            "terminal.ansiBrightBlack": mcu.hexFromArgb(scheme_8.get_bright_black()),
            "terminal.ansiBrightRed": mcu.hexFromArgb(scheme_8.get_bright_red()),
            "terminal.ansiBrightGreen": mcu.hexFromArgb(scheme_8.get_bright_green()),
            "terminal.ansiBrightYellow": mcu.hexFromArgb(scheme_8.get_bright_yellow()),
            "terminal.ansiBrightBlue": mcu.hexFromArgb(scheme_8.get_bright_blue()),
            "terminal.ansiBrightMagenta": mcu.hexFromArgb(scheme_8.get_bright_magenta()),
            "terminal.ansiBrightCyan": mcu.hexFromArgb(scheme_8.get_bright_cyan()),
            "terminal.ansiBrightWhite": mcu.hexFromArgb(scheme_8.get_bright_white()),
            "terminal.selectionBackground": mcu.hexFromArgb(scheme.get_primary()),
            "terminal.selectionForeground": mcu.hexFromArgb(scheme.get_onPrimary()),
            "terminalCursor.background": mcu.hexFromArgb(scheme.get_onPrimary()),
            "terminalCursor.foreground": mcu.hexFromArgb(scheme.get_primary()),
            "settings.modifiedItemIndicator": mcu.hexFromArgb(scheme.get_tertiary()),
            "settings.headerForeground": mcu.hexFromArgb(scheme.get_onSurface()),
            "settings.settingsHeaderHoverForeground": mcu.hexFromArgb(scheme.get_onSurface())
        },
        "tokenColors": [
            {
                "scope": [
                    "meta.embedded",
                    "source.groovy.embedded",
                    "meta.jsx.children",
                    "string meta.image.inline.markdown",
                ],
                "settings": {"foreground": mcu.hexFromArgb(scheme.get_onSurface())},
            },
            {
                "name": "Comments",
                "scope": ["comment", "string.quoted.docstring"],
                "settings": {"fontStyle": "italic", "foreground": mcu.hexFromArgb(scheme.get_secondary())},
            },
            {
                "name": "Foreground, Operator",
                "scope": "keyword.operator.class, keyword.operator, constant.other, source.php.embedded.line",
                "settings": {"fontStyle": "", "foreground": mcu.hexFromArgb(scheme.get_onSurface())},
            },
            {
                "name": "Variable, String Link, Regular Expression, Tag Name",
                "scope": "variable, support.other.variable, string.other.link, string.regexp, entity.name.tag, entity.other.attribute-name, meta.tag, declaration.tag, markup.deleted.git_gutter",
                "settings": {"foreground": mcu.hexFromArgb(scheme_wheel.get_yellow())},
            },
            {
                "name": "Number, Constant, Function Argument, Tag Attribute, Embedded",
                "scope": "constant.numeric, constant.language, support.constant, constant.character, variable.parameter, punctuation.section.embedded, keyword.other.unit",
                "settings": {"fontStyle": "", "foreground": mcu.hexFromArgb(scheme.get_tertiary())},
            },
            {
                "name": "Class, Support",
                "scope": "entity.name.class, entity.name.type, entity.name.namespace, entity.name.scope-resolution, support.type, support.class",
                "settings": {"fontStyle": "", "foreground": mcu.hexFromArgb(scheme_wheel.get_green())},
            },
            {
                "name": "String, Symbols, Inherited Class, Markup Heading, GitGutter inserted",
                "scope": "string, constant.other.symbol, entity.other.inherited-class, markup.heading, markup.inserted.git_gutter",
                "settings": {"fontStyle": "", "foreground": mcu.hexFromArgb(scheme_wheel.get_violet_red())},
            },
            {
                "name": "Operator, Misc",
                "scope": "keyword.operator, constant.other.color",
                "settings": {"foreground": mcu.hexFromArgb(scheme_wheel.get_blue())},
            },
            {
                "name": "Function, Special Method, Block Level",
                "scope": "entity.name.function, meta.function-call, support.function, keyword.other.special-method, meta.block-level, markup.changed.git_gutter",
                "settings": {"fontStyle": "", "foreground": mcu.hexFromArgb(scheme.get_primary())},
            },
            {
                "name": "Keyword, Storage",
                "scope": "keyword, storage, storage.type, entity.name.tag.css",
                "settings": {"fontStyle": "", "foreground": mcu.hexFromArgb(scheme_wheel.get_orange())},
            },
            {
                "name": "Invalid",
                "scope": "invalid",
                "settings": {"fontStyle": "", "foreground": mcu.hexFromArgb(scheme.get_error())},
            },
            {
                "name": "Separator",
                "scope": "meta.separator",
                "settings": {"foreground": mcu.hexFromArgb(scheme.get_onSurface())},
            },
            {
                "name": "Diff foreground",
                "scope": "markup.inserted.diff, markup.deleted.diff, meta.diff.header.to-file, meta.diff.header.from-file",
                "settings": {"foreground": mcu.hexFromArgb(scheme.get_onSurface())},
            },
            {
                "name": "Diff insertion",
                "scope": "markup.inserted.diff, meta.diff.header.to-file",
                "settings": {"foreground": mcu.hexFromArgb(scheme.get_primary())},
            },
            {
                "name": "Diff deletion",
                "scope": "markup.deleted.diff, meta.diff.header.from-file",
                "settings": {"foreground": mcu.hexFromArgb(scheme.get_error())},
            },
            {
                "name": "Diff header",
                "scope": "meta.diff.header.from-file, meta.diff.header.to-file",
                "settings": {"foreground": mcu.hexFromArgb(scheme.get_onSurface())},
            },
            {
                "name": "Diff range",
                "scope": "meta.diff.range",
                "settings": {"fontStyle": "italic", "foreground": mcu.hexFromArgb(scheme.get_onSurface())},
            },
            {
                "name": "Markup Quote",
                "scope": "markup.quote",
                "settings": {"foreground": mcu.hexFromArgb(scheme.get_tertiary())},
            },
            {
                "name": "Markup Lists",
                "scope": "markup.list",
                "settings": {"foreground": mcu.hexFromArgb(scheme.get_tertiary())},
            },
            {
                "name": "Markup Styling",
                "scope": "markup.bold, markup.italic",
                "settings": {"foreground": mcu.hexFromArgb(scheme.get_onSurface())},
            },
            {
                "name": "Markup: Strong",
                "scope": "markup.bold",
                "settings": {"fontStyle": "bold"},
            },
            {
                "name": "Markup: Emphasis",
                "scope": "markup.italic",
                "settings": {"fontStyle": "italic"},
            },
            {
                "scope": "markup.strikethrough",
                "settings": {"fontStyle": "strikethrough"},
            },
            {
                "name": "Markup Inline",
                "scope": "markup.inline.raw",
                "settings": {"fontStyle": "", "foreground": mcu.hexFromArgb(scheme.get_tertiary())},
            },
            {
                "name": "Markup Headings",
                "scope": "markup.heading",
                "settings": {"foreground": mcu.hexFromArgb(scheme.get_primary())},
            },
            {"scope": "token.info-token", "settings": {"foreground": mcu.hexFromArgb(scheme.get_tertiary())}},
            {"scope": "token.warn-token", "settings": {"foreground": mcu.hexFromArgb(scheme.get_primary())}},
            {"scope": "token.error-token", "settings": {"foreground": mcu.hexFromArgb(scheme.get_error())}},
            {"scope": "token.debug-token", "settings": {"foreground": mcu.hexFromArgb(scheme.get_tertiary())}},
        ],
    }

    json.dump(dictionary, file, indent=4)
