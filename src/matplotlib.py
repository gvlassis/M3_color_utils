import material_color_utilities_python as mcu
import vscode

def write(file, theme, mode):
    wheel_hex = vscode.get_wheel_hex(theme, mode)

    if mode == "dark":
        primary = theme["palettes"]["primary"].tone(80)
        primary_hex = mcu.hexFromArgb(primary)

        secondary = theme["palettes"]["secondary"].tone(80)
        secondary_hex = mcu.hexFromArgb(secondary)

        tertiary = theme["palettes"]["tertiary"].tone(80)
        tertiary_hex = mcu.hexFromArgb(tertiary)

        surface_container_low = theme["palettes"]["neutral"].tone(10)
        surface_container_low_hex = mcu.hexFromArgb(surface_container_low)
        surface_container = theme["palettes"]["neutral"].tone(12)
        surface_container_hex = mcu.hexFromArgb(surface_container)
        surface_container_high = theme["palettes"]["neutral"].tone(17)
        surface_container_high_hex = mcu.hexFromArgb(surface_container_high)
        surface_container_highest = theme["palettes"]["neutral"].tone(22)
        surface_container_highest_hex = mcu.hexFromArgb(surface_container_highest)
        on_surface = theme["palettes"]["neutral"].tone(90)
        on_surface_hex = mcu.hexFromArgb(on_surface)
    else:
        primary = theme["palettes"]["primary"].tone(40)
        primary_hex = mcu.hexFromArgb(primary)

        secondary = theme["palettes"]["secondary"].tone(40)
        secondary_hex = mcu.hexFromArgb(secondary)

        tertiary = theme["palettes"]["tertiary"].tone(40)
        tertiary_hex = mcu.hexFromArgb(tertiary)

        surface_container_low = theme["palettes"]["neutral"].tone(96)
        surface_container_low_hex = mcu.hexFromArgb(surface_container_low)
        surface_container = theme["palettes"]["neutral"].tone(94)
        surface_container_hex = mcu.hexFromArgb(surface_container)
        surface_container_high = theme["palettes"]["neutral"].tone(92)
        surface_container_high_hex = mcu.hexFromArgb(surface_container_high)
        surface_container_highest = theme["palettes"]["neutral"].tone(90)
        surface_container_highest_hex = mcu.hexFromArgb(surface_container_highest)
        on_surface = theme["palettes"]["neutral"].tone(10)
        on_surface_hex = mcu.hexFromArgb(on_surface)

    # file.write("lines.markerfacecolor: auto\n")     
    # file.write("lines.markeredgecolor: auto\n")        
    file.write("patch.facecolor: C0\n")
    file.write("patch.edgecolor: \"%s\"\n" % (on_surface_hex))
    file.write("hatch.color: \"%s\"\n" % (on_surface_hex))
    file.write("boxplot.flierprops.color: \"%s\"\n" % (on_surface_hex))
    # file.write("boxplot.flierprops.markerfacecolor: none\n")
    file.write("boxplot.flierprops.markeredgecolor: \"%s\"\n" % (on_surface_hex))
    file.write("boxplot.boxprops.color: \"%s\"\n" % (on_surface_hex))
    file.write("boxplot.whiskerprops.color: \"%s\"\n" % (on_surface_hex))
    file.write("boxplot.capprops.color: \"%s\"\n" % (on_surface_hex))
    file.write("boxplot.medianprops.color: C1\n")
    file.write("boxplot.meanprops.color: C2\n")
    file.write("boxplot.meanprops.markerfacecolor: C2\n")
    file.write("boxplot.meanprops.markeredgecolor: C2\n")
    file.write("text.color: \"%s\"\n" % (on_surface_hex))
    file.write("axes.facecolor: \"%s\"\n" % (surface_container_high_hex)) 
    file.write("axes.edgecolor: \"%s\"\n" % (on_surface_hex))
    file.write("axes.titlecolor: \"%s\"\n" % (on_surface_hex))
    file.write("axes.labelcolor: \"%s\"\n" % (on_surface_hex))
    file.write("axes.prop_cycle: cycler(\"color\", [\"%s\", \"%s\", \"%s\", \"%s\", \"%s\", \"%s\", \"%s\", \"%s\", \"%s\", \"%s\", \"%s\", \"%s\", \"%s\", \"%s\"])\n" % (primary_hex, tertiary_hex, wheel_hex[11], wheel_hex[10], wheel_hex[9], wheel_hex[8], wheel_hex[7], wheel_hex[6], wheel_hex[5], wheel_hex[4], wheel_hex[3], wheel_hex[2], wheel_hex[1], wheel_hex[0]))
    file.write("axes3d.xaxis.panecolor: \"%s\"\n" % (surface_container_high_hex))
    file.write("axes3d.yaxis.panecolor: \"%s\"\n" % (surface_container_high_hex))
    file.write("axes3d.zaxis.panecolor: \"%s\"\n" % (surface_container_high_hex))
    file.write("xtick.color: \"%s\"\n" % (secondary_hex))
    file.write("xtick.labelcolor: inherit\n")
    file.write("ytick.color: \"%s\"\n" % (secondary_hex))
    file.write("ytick.labelcolor: inherit\n")
    file.write("grid.color: \"%s\"\n" % (on_surface_hex))
    file.write("legend.facecolor: \"%s\"\n" % (surface_container_highest_hex))
    file.write("legend.edgecolor: \"%s\"\n" % (surface_container_highest_hex))
    file.write("legend.labelcolor: \"%s\"\n" % (on_surface_hex))
    file.write("figure.facecolor: \"%s\"\n" % (surface_container_low_hex))
    file.write("figure.edgecolor: \"#00000000\"")
    # file.write("scatter.edgecolors: face\n")
    # file.write("savefig.facecolor: auto\n")
    # file.write("savefig.edgecolor: auto\n")
    # file.write("pdf.inheritcolor: False\n")

